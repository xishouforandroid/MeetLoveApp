package com.lbins.meetlove.dao;

import com.lbins.meetlove.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table HAPPY_HAND_JW.
 */
public class HappyHandJw {

    /** Not-null value. */
    private String jwid;
    private String empid1;
    private String empid2;
    private String applytime;
    private String startime;
    private String endtime;
    private String is_check;
    private String is_use;
    private String empid1Cover;
    private String empid1Nickname;
    private String empid2Cover;
    private String empid2Nickname;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HappyHandJwDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public HappyHandJw() {
    }

    public HappyHandJw(String jwid) {
        this.jwid = jwid;
    }

    public HappyHandJw(String jwid, String empid1, String empid2, String applytime, String startime, String endtime, String is_check, String is_use, String empid1Cover, String empid1Nickname, String empid2Cover, String empid2Nickname) {
        this.jwid = jwid;
        this.empid1 = empid1;
        this.empid2 = empid2;
        this.applytime = applytime;
        this.startime = startime;
        this.endtime = endtime;
        this.is_check = is_check;
        this.is_use = is_use;
        this.empid1Cover = empid1Cover;
        this.empid1Nickname = empid1Nickname;
        this.empid2Cover = empid2Cover;
        this.empid2Nickname = empid2Nickname;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHappyHandJwDao() : null;
    }

    /** Not-null value. */
    public String getJwid() {
        return jwid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setJwid(String jwid) {
        this.jwid = jwid;
    }

    public String getEmpid1() {
        return empid1;
    }

    public void setEmpid1(String empid1) {
        this.empid1 = empid1;
    }

    public String getEmpid2() {
        return empid2;
    }

    public void setEmpid2(String empid2) {
        this.empid2 = empid2;
    }

    public String getApplytime() {
        return applytime;
    }

    public void setApplytime(String applytime) {
        this.applytime = applytime;
    }

    public String getStartime() {
        return startime;
    }

    public void setStartime(String startime) {
        this.startime = startime;
    }

    public String getEndtime() {
        return endtime;
    }

    public void setEndtime(String endtime) {
        this.endtime = endtime;
    }

    public String getIs_check() {
        return is_check;
    }

    public void setIs_check(String is_check) {
        this.is_check = is_check;
    }

    public String getIs_use() {
        return is_use;
    }

    public void setIs_use(String is_use) {
        this.is_use = is_use;
    }

    public String getEmpid1Cover() {
        return empid1Cover;
    }

    public void setEmpid1Cover(String empid1Cover) {
        this.empid1Cover = empid1Cover;
    }

    public String getEmpid1Nickname() {
        return empid1Nickname;
    }

    public void setEmpid1Nickname(String empid1Nickname) {
        this.empid1Nickname = empid1Nickname;
    }

    public String getEmpid2Cover() {
        return empid2Cover;
    }

    public void setEmpid2Cover(String empid2Cover) {
        this.empid2Cover = empid2Cover;
    }

    public String getEmpid2Nickname() {
        return empid2Nickname;
    }

    public void setEmpid2Nickname(String empid2Nickname) {
        this.empid2Nickname = empid2Nickname;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
