package com.lbins.meetlove.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lbins.meetlove.dao.HappyHandNews;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HAPPY_HAND_NEWS.
*/
public class HappyHandNewsDao extends AbstractDao<HappyHandNews, String> {

    public static final String TABLENAME = "HAPPY_HAND_NEWS";

    /**
     * Properties of entity HappyHandNews.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Newsid = new Property(0, String.class, "newsid", true, "NEWSID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Dateline = new Property(2, String.class, "dateline", false, "DATELINE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Is_read = new Property(4, String.class, "is_read", false, "IS_READ");
    };

    private DaoSession daoSession;


    public HappyHandNewsDao(DaoConfig config) {
        super(config);
    }
    
    public HappyHandNewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HAPPY_HAND_NEWS' (" + //
                "'NEWSID' TEXT PRIMARY KEY NOT NULL ," + // 0: newsid
                "'TITLE' TEXT," + // 1: title
                "'DATELINE' TEXT," + // 2: dateline
                "'CONTENT' TEXT," + // 3: content
                "'IS_READ' TEXT);"); // 4: is_read
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HAPPY_HAND_NEWS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HappyHandNews entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNewsid());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindString(3, dateline);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindString(5, is_read);
        }
    }

    @Override
    protected void attachEntity(HappyHandNews entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HappyHandNews readEntity(Cursor cursor, int offset) {
        HappyHandNews entity = new HappyHandNews( //
            cursor.getString(offset + 0), // newsid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dateline
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // is_read
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HappyHandNews entity, int offset) {
        entity.setNewsid(cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateline(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_read(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(HappyHandNews entity, long rowId) {
        return entity.getNewsid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(HappyHandNews entity) {
        if(entity != null) {
            return entity.getNewsid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
