package com.lbins.meetlove.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lbins.meetlove.dao.Friends;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIENDS.
*/
public class FriendsDao extends AbstractDao<Friends, String> {

    public static final String TABLENAME = "FRIENDS";

    /**
     * Properties of entity Friends.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Friendsid = new Property(0, String.class, "friendsid", true, "FRIENDSID");
        public final static Property Empid1 = new Property(1, String.class, "empid1", false, "EMPID1");
        public final static Property Empid2 = new Property(2, String.class, "empid2", false, "EMPID2");
        public final static Property Applytitle = new Property(3, String.class, "applytitle", false, "APPLYTITLE");
        public final static Property Applytime = new Property(4, String.class, "applytime", false, "APPLYTIME");
        public final static Property Accepttime = new Property(5, String.class, "accepttime", false, "ACCEPTTIME");
        public final static Property Is_check = new Property(6, String.class, "is_check", false, "IS_CHECK");
        public final static Property Empid1Cover = new Property(7, String.class, "empid1Cover", false, "EMPID1_COVER");
        public final static Property Empid1Nickname = new Property(8, String.class, "empid1Nickname", false, "EMPID1_NICKNAME");
        public final static Property Empid2Cover = new Property(9, String.class, "empid2Cover", false, "EMPID2_COVER");
        public final static Property Empid2Nickname = new Property(10, String.class, "empid2Nickname", false, "EMPID2_NICKNAME");
    };

    private DaoSession daoSession;


    public FriendsDao(DaoConfig config) {
        super(config);
    }
    
    public FriendsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIENDS' (" + //
                "'FRIENDSID' TEXT PRIMARY KEY NOT NULL ," + // 0: friendsid
                "'EMPID1' TEXT," + // 1: empid1
                "'EMPID2' TEXT," + // 2: empid2
                "'APPLYTITLE' TEXT," + // 3: applytitle
                "'APPLYTIME' TEXT," + // 4: applytime
                "'ACCEPTTIME' TEXT," + // 5: accepttime
                "'IS_CHECK' TEXT," + // 6: is_check
                "'EMPID1_COVER' TEXT," + // 7: empid1Cover
                "'EMPID1_NICKNAME' TEXT," + // 8: empid1Nickname
                "'EMPID2_COVER' TEXT," + // 9: empid2Cover
                "'EMPID2_NICKNAME' TEXT);"); // 10: empid2Nickname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIENDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friends entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFriendsid());
 
        String empid1 = entity.getEmpid1();
        if (empid1 != null) {
            stmt.bindString(2, empid1);
        }
 
        String empid2 = entity.getEmpid2();
        if (empid2 != null) {
            stmt.bindString(3, empid2);
        }
 
        String applytitle = entity.getApplytitle();
        if (applytitle != null) {
            stmt.bindString(4, applytitle);
        }
 
        String applytime = entity.getApplytime();
        if (applytime != null) {
            stmt.bindString(5, applytime);
        }
 
        String accepttime = entity.getAccepttime();
        if (accepttime != null) {
            stmt.bindString(6, accepttime);
        }
 
        String is_check = entity.getIs_check();
        if (is_check != null) {
            stmt.bindString(7, is_check);
        }
 
        String empid1Cover = entity.getEmpid1Cover();
        if (empid1Cover != null) {
            stmt.bindString(8, empid1Cover);
        }
 
        String empid1Nickname = entity.getEmpid1Nickname();
        if (empid1Nickname != null) {
            stmt.bindString(9, empid1Nickname);
        }
 
        String empid2Cover = entity.getEmpid2Cover();
        if (empid2Cover != null) {
            stmt.bindString(10, empid2Cover);
        }
 
        String empid2Nickname = entity.getEmpid2Nickname();
        if (empid2Nickname != null) {
            stmt.bindString(11, empid2Nickname);
        }
    }

    @Override
    protected void attachEntity(Friends entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Friends readEntity(Cursor cursor, int offset) {
        Friends entity = new Friends( //
            cursor.getString(offset + 0), // friendsid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // empid1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // empid2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // applytitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // applytime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accepttime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // is_check
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // empid1Cover
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // empid1Nickname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // empid2Cover
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // empid2Nickname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Friends entity, int offset) {
        entity.setFriendsid(cursor.getString(offset + 0));
        entity.setEmpid1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmpid2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplytitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApplytime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccepttime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_check(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmpid1Cover(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmpid1Nickname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmpid2Cover(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmpid2Nickname(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Friends entity, long rowId) {
        return entity.getFriendsid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Friends entity) {
        if(entity != null) {
            return entity.getFriendsid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
