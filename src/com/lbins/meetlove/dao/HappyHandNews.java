package com.lbins.meetlove.dao;

import com.lbins.meetlove.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table HAPPY_HAND_NEWS.
 */
public class HappyHandNews {

    /** Not-null value. */
    private String newsid;
    private String title;
    private String dateline;
    private String content;
    private String is_read;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HappyHandNewsDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public HappyHandNews() {
    }

    public HappyHandNews(String newsid) {
        this.newsid = newsid;
    }

    public HappyHandNews(String newsid, String title, String dateline, String content, String is_read) {
        this.newsid = newsid;
        this.title = title;
        this.dateline = dateline;
        this.content = content;
        this.is_read = is_read;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHappyHandNewsDao() : null;
    }

    /** Not-null value. */
    public String getNewsid() {
        return newsid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNewsid(String newsid) {
        this.newsid = newsid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDateline() {
        return dateline;
    }

    public void setDateline(String dateline) {
        this.dateline = dateline;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getIs_read() {
        return is_read;
    }

    public void setIs_read(String is_read) {
        this.is_read = is_read;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
