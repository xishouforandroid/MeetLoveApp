package com.lbins.meetlove.dao;

import com.lbins.meetlove.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FRIENDS.
 */
public class Friends {

    /** Not-null value. */
    private String friendsid;
    private String empid1;
    private String empid2;
    private String applytitle;
    private String applytime;
    private String accepttime;
    private String is_check;
    private String empid1Cover;
    private String empid1Nickname;
    private String empid2Cover;
    private String empid2Nickname;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FriendsDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Friends() {
    }

    public Friends(String friendsid) {
        this.friendsid = friendsid;
    }

    public Friends(String friendsid, String empid1, String empid2, String applytitle, String applytime, String accepttime, String is_check, String empid1Cover, String empid1Nickname, String empid2Cover, String empid2Nickname) {
        this.friendsid = friendsid;
        this.empid1 = empid1;
        this.empid2 = empid2;
        this.applytitle = applytitle;
        this.applytime = applytime;
        this.accepttime = accepttime;
        this.is_check = is_check;
        this.empid1Cover = empid1Cover;
        this.empid1Nickname = empid1Nickname;
        this.empid2Cover = empid2Cover;
        this.empid2Nickname = empid2Nickname;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFriendsDao() : null;
    }

    /** Not-null value. */
    public String getFriendsid() {
        return friendsid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFriendsid(String friendsid) {
        this.friendsid = friendsid;
    }

    public String getEmpid1() {
        return empid1;
    }

    public void setEmpid1(String empid1) {
        this.empid1 = empid1;
    }

    public String getEmpid2() {
        return empid2;
    }

    public void setEmpid2(String empid2) {
        this.empid2 = empid2;
    }

    public String getApplytitle() {
        return applytitle;
    }

    public void setApplytitle(String applytitle) {
        this.applytitle = applytitle;
    }

    public String getApplytime() {
        return applytime;
    }

    public void setApplytime(String applytime) {
        this.applytime = applytime;
    }

    public String getAccepttime() {
        return accepttime;
    }

    public void setAccepttime(String accepttime) {
        this.accepttime = accepttime;
    }

    public String getIs_check() {
        return is_check;
    }

    public void setIs_check(String is_check) {
        this.is_check = is_check;
    }

    public String getEmpid1Cover() {
        return empid1Cover;
    }

    public void setEmpid1Cover(String empid1Cover) {
        this.empid1Cover = empid1Cover;
    }

    public String getEmpid1Nickname() {
        return empid1Nickname;
    }

    public void setEmpid1Nickname(String empid1Nickname) {
        this.empid1Nickname = empid1Nickname;
    }

    public String getEmpid2Cover() {
        return empid2Cover;
    }

    public void setEmpid2Cover(String empid2Cover) {
        this.empid2Cover = empid2Cover;
    }

    public String getEmpid2Nickname() {
        return empid2Nickname;
    }

    public void setEmpid2Nickname(String empid2Nickname) {
        this.empid2Nickname = empid2Nickname;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
